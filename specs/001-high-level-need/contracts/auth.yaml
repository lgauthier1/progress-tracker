paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Create a new user account with email and password
      tags:
        - Authentication
      security: [] # Public endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: SecurePassword123!
                timezone:
                  type: string
                  description: IANA timezone identifier
                  default: UTC
                  example: America/New_York
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '../openapi.yaml#/responses/ValidationError'
        '409':
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'
              example:
                error:
                  code: DUPLICATE_ENTRY
                  message: Email already registered
        '500':
          $ref: '../openapi.yaml#/responses/InternalError'
  
  /auth/login:
    post:
      summary: Log in
      description: Authenticate with email and password, receive JWT tokens
      tags:
        - Authentication
      security: [] # Public endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: SecurePassword123!
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '../openapi.yaml#/responses/ValidationError'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'
              example:
                error:
                  code: UNAUTHORIZED
                  message: Invalid email or password
        '500':
          $ref: '../openapi.yaml#/responses/InternalError'
  
  /auth/refresh:
    post:
      summary: Refresh access token
      description: Exchange refresh token for new access token
      tags:
        - Authentication
      security: [] # Uses refresh token in body, not access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - accessToken
                properties:
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'
              example:
                error:
                  code: INVALID_TOKEN
                  message: Refresh token is invalid or expired
        '500':
          $ref: '../openapi.yaml#/responses/InternalError'
  
  /auth/logout:
    post:
      summary: Log out
      description: Invalidate current refresh token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '204':
          description: Logged out successfully (no content)
        '500':
          $ref: '../openapi.yaml#/responses/InternalError'
  
  /auth/me:
    get:
      summary: Get current user
      description: Retrieve authenticated user's profile
      tags:
        - Authentication
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '../openapi.yaml#/responses/Unauthorized'
        '500':
          $ref: '../openapi.yaml#/responses/InternalError'

components:
  schemas:
    AuthResponse:
      type: object
      required:
        - user
        - accessToken
        - refreshToken
      properties:
        user:
          $ref: '#/components/schemas/User'
        accessToken:
          type: string
          description: JWT access token (expires in 15 minutes)
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          description: JWT refresh token (expires in 7 days)
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    
    User:
      type: object
      required:
        - id
        - email
        - timezone
        - createdAt
      properties:
        id:
          $ref: '../openapi.yaml#/components/schemas/UUID'
        email:
          type: string
          format: email
          example: user@example.com
        timezone:
          type: string
          example: America/New_York
        createdAt:
          $ref: '../openapi.yaml#/components/schemas/ISODateTime'
        updatedAt:
          $ref: '../openapi.yaml#/components/schemas/ISODateTime'

